# JavaScript has the primitive data types and Object type(complex type):

 1.null 
 2.undefined
 3.boolean
 4.number
 5.string
 6.symbol – available from ES2015
 7.bigint – available from ES2020

# Object type(complex type)/Refrence type

 1.Objects
 2.Arrays
 3.Functions

  + JavaScript is a dynamically typed language. It means that a variable doesn’t associate with a type. 
	let counter = 120; // counter is a number
	counter = false;   // counter is now a boolean
	counter = "foo";   // counter is now a string

  + To get the current type of the value that the variable stores, you use the typeof operator:
	
	let counter = 120;
	console.log(typeof(counter)); // "number"

	counter = false; 
	console.log(typeof(counter)); // "boolean"

# undefined 

   + It has only one value "undefined".
   + By default, when a variable is declared but not initialized, it is assigned the value of undefined.
		let counter;
		console.log(counter);        // undefined
		console.log(typeof counter); // undefined

# null
	
  + It has only one value "null". For example:
		let obj = null;
		console.log(typeof obj); // object
  + The typeof null returns object is a known bug in JavaScript. A proposal to fix this was proposed but rejected. The reason was the that fix would break a lot of existing sites.

  + JavaScript defines that null is equal to undefined as follows:
		console.log(null == undefined); // true


# Number

  + JavaScript uses the number type to represent both integer and floating-point numbers
		let price= 12; 
		let discount = 0.05;
  +JavaScript automatically converts a floating-point number into an integer number if the number appears to be a whole number.

  + The reason is that Javascript always wants to use less memory since a floating-point value uses twice as much memory as an integer value. 

  + To get the range of the number type, you use Number.MIN_VALUE and Number.MAX_VALUE. For example:
                console.log(Number.MAX_VALUE); // 1.7976931348623157e+308
                console.log(Number.MIN_VALUE); // 5e-324

# NaN

  + NaN stands for Not a Number.

  +  It is a special numeric value that indicates an invalid number. For example, the division of a string by a number returns NaN
	console.log('a'/2); // NaN;

  + Any operation with NaN returns NaN.

		console.log(NaN/2); // NaN

  + The NaN does not equal any value, including itself.ex.

		console.log(NaN == NaN); // false 
			
		console.log(undefined==undefined) // true


# The string type

 + A string literal begins and ends with either a single quote(') or a double quote (").

	let greeting = 'Hi';
	let message  = "Bye";
 + If you want to single quote or double quotes in a literal string, you need to use the backslash to escape it. For example:
	
	let message = 'I\'m also a valid string'; // use \ to escape the single quote (')
 
 + the template literals allow you to use the single quotes and double quotes inside a string without the need of escaping them. For example:

	let mesage = `"I'm good". She said";

 + ES6 introduced template literals that allow you to define a string backtick (`) characters:

 + JavaScript strings are immutable. This means that it cannot be modified once created. However, you can create a new string from an existing string. For example:
		let s = 'JavaScript';
		s[0] = 'j';
		console.log(s)
	The output is: 'JavaScript'Code language: JavaScript  But not:'javaScript'

	But you can create a new string example 

	let str = 'JavaScript';
	str = str + ' String';


 + Note that JavaScript has the String type (with the letter S in uppercase), which is the primitive wrapper type of the primitive string type. Therefore, you can access all properties and    methods of the String type from a primitive string.
        let str = "Good Morning!";
	console.log(str.length);  // 13

 + Accessing characters
	let str = "Hello";
	console.log(str[0]); // "H"

 + Converting values to string
	
	String(n);
	n.toString()

    Note that the toString() method doesn’t work for undefined and null.




# The boolean type

 + The boolean type has two literal values: true and false in lowercase. 
	let inProgress = true;
	let completed = false;
	console.log(typeof completed); // boolean

+ JavaScript allows values of other types to be converted into boolean values of true or false.

+ To convert a value of another data type into a boolean value, you use the Boolean()

		Type			true					false

		string			non-empty string			empty string

		number			non-zero number and Infinity		0, NaN

		object			non-null object				null

		undefined	 						undefined

Examples

	console.log(Boolean('Hi'));// true
	console.log(Boolean(''));  // false

	console.log(Boolean(20));  // true
	console.log(Boolean(Infinity));  // true
	console.log(Boolean(0));  // false

	console.log(Boolean({foo: 100}));  // true on non-empty object
	console.log(Boolean(null));// false


# The symbol type

# bigint type



# JavaScript Boolean object

  + To convert a value of another data type into a boolean value, you use the Boolean()
  + The Boolean is also a wrapper object of the boolean primitive type. It means that when you pass either true or false to the Boolean constructor, it’ll create a Boolean object. For  example:

		let b = new Boolean(false);
  + To get the primitive value back, you call the valueOf() method of the Boolean object as follows:

		console.log(b.valueOf()); // false

  + However, if you call the toString() method of a Boolean object, you get a string value "true" or "false". For example:

	       console.log(b.toString()); // "false"



# Diffrence b/w JavaScript boolean vs. Boolean
	let completed = true;
	let active = new Boolean(false);

 1. First, active is an object so you can add a property to it.
	active.primitiveValue = active.valueOf();
	console.log(active.primitiveValue); // false
 
    However, you cannot do it with the primitive boolean variable like the completed variable:
	completed.name = 'primitive';
	console.log(completed.name); // undefined

2. the typeof of Boolean object returns object, whereas the typeof of a primitive boolean value returns boolean.
	
	console.log(typeof completed); // boolean
	console.log(typeof active); // object	

3. when applying the  instanceof operator to a Boolean object, it returns true. However, it returns false if you apply the  instanceof operator to a boolean value.

	console.log(completed instanceof Boolean); // false
	console.log(active instanceof Boolean); // true

## The following table summarizes the differences between the JavaScript Boolean and boolean:

		Operator		boolean		Boolean
 		typeof			boolean		object
 		instanceof Boolean	false		true

conclusion :- It is recommended that you use the Boolean() function to convert a value of a different type to a Boolean type, but you should never use the Boolean as a wrapper object of a 		primitive boolean value.


