### JavaScript functions

# Declare a function

 +  To declare a function, you use the function keyword, followed by the function name, a list of   parameters, and the function body as follows:

		function functionName(parameters) {
		    // function body//
		}
 + The function name must be a valid JavaScript identifier. By convention, the function names are in  camelCase and start with verbs like getData().



# Calling a function

 + To use a function, you need to call it.like this:
		functionName(arguments);


# Returning a value

 + Every function in JavaScript implicitly returns undefined unless you explicitly specify a return value. For example:

	function say(message) {
	    console.log(message);
	}

	let result = say('Hello');
	console.log('Result:', result);	 //Hello  Result: undefined


+ To specify a return value for a function, you use the return statement followed by an expression or a value, like this:

	function add(a, b) {
	    return a + b;
	}



# The arguments object

 + Inside a function, you can access an object called arguments that represents the named arguments of the function.

 + The arguments object behaves like an array though it is not an instance of the Array type.

 + you can use the square bracket [] to access the arguments: arguments[0] returns the first argument,   arguments[1] returns the second one, and so on.

 + you can use the length property of the arguments object to determine the number of arguments.

 Example :

	function add() {
	    let sum = 0;
	    for (let i = 0; i < arguments.length; i++) {
	        sum += arguments[i];
	    }
	    return sum;
	}

 Hence, you can pass any number of arguments to the add() function, like this:

 console.log(add(1, 2)); // 3
 console.log(add(1, 2, 3, 4, 5)); // 15



# Function hoisting

+ In JavaScript, you can use a function before declaring it. For example:

	showMe(); // a hoisting example
	function showMe(){
	    console.log('an hoisting example');
	}
  This feature is called hoisting.


+ Function hoisting is a mechanism that the JavaScript engine physically moves function declarations to the top of the code before executing them.




# Storing functions in variables 
 
 + you can treat functions like values of other types.

	function add(a, b) {
	    return a + b;
	}

	let sum = add;

  + In the assignment statement, we don’t include the opening and closing parentheses at the end of the add identifier. We also don’t execute the function but reference the  function.

  + By doing this, we can have two ways to execute the same function. For example, we can call it normally as follows:

	let result = add(10, 20);
Alternatively,
	let result = sum(10,20);


# Passing a function to another function

  + Because functions are values, you can pass a function as an argument into another function.

	function add(a, b) {
	    return a + b;
	}

	let sum = add;

	function average(a, b, fn) {
	    return fn(a, b) / 2;
	}

	let result = average(10, 20, sum);
	console.log(result);


# Returning functions from functions

Example-1 
	function compareBy(propertyName) {
 	 return function (a, b) {
	    let x = a[propertyName],
	      y = b[propertyName];

	    if (x > y) {
	      return 1;
	    } else if (x < y) {
	      return -1;
	    } else {
	      return 0;
	    }
	  };
	}
	let products = [
	  { name: 'iPhone', price: 900 },
	  { name: 'Samsung Galaxy', price: 850 },
	  { name: 'Sony Xperia', price: 700 },
	];

	// sort products by name
	console.log('Products sorted by name:');
	products.sort(compareBy('name'));
	console.table(products);

	// sort products by price
	console.log('Products sorted by price:');
	products.sort(compareBy('price'));
	console.table(products);

-------------------------------------------------------------------
	function cmToIn(length) {
	  return length / 2.54;
	}

	function inToCm(length) {
	  return length * 2.54;
	}

	function convert(fn, length) {
	  return fn(length);
	}

	let inches = convert(cmToIn, 10);
	console.log(inches);

	let cm = convert(inToCm, 10);
	console.log(cm);


# JavaScript anonymous functions

 + An anonymous function is a function without a name. The following shows how to define an anonymous function:
     (function () {
          //...
      });

 + if you don’t place the anonymous function inside the (), you’ll get a syntax error.

 + An anonymous function is not accessible after its initial creation. Therefore, you often need to assign it to a variable.

		let show = function() {
	          console.log('Anonymous function');
		};
		 show();

	-- Since the whole assignment of the anonymous function to the show variable makes a valid expression, you don’t need to wrap the anonymous function inside the parentheses ().


# Using anonymous functions as arguments

 + you often pass anonymous functions as arguments to other functions. For example:
	
	setTimeout(function() {
	    console.log('Execute later after 1 second')
	}, 1000);

# Immediately invoked function execution

  + If you want to create a function and execute it immediately after the declaration, you can declare an anonymous function like this:
		(function() {
		    console.log('IIFE');
		})();

  + sometimes, you may want to pass arguments into it, like this:

	let person = {
    	firstName: 'John',
    	lastName: 'Doe'
	};

	(function () {
	    console.log(person.firstName} + ' ' + person.lastName);
	})(person);


# Arrow functions

+ ES6 introduced arrow function expressions that provide a shorthand for declaring anonymous functions: 
	For example, this function:
			let show = function () {
			    console.log('Anonymous function');
			};
	… can be shortened using the following arrow function:

			let show = () => console.log('Anonymous function');

Example 2 
Similarly, the following anonymous function:
	let add = function (a, b) {
 	   return a + b;
	};
… is functionally equivalent to the following arrow function:
 let add = (a, b) => a + b;   


# JavaScript Default Parameters