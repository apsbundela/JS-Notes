A factory function is a function that returns a new object.


			function createPerson(firstName, lastName) {
  			return {
			    firstName: firstName,
			    lastName: lastName,
			    getFullName() {
			      return firstName + ' ' + lastName;
			    },
			  };
			}

			let person1 = createPerson('John', 'Doe');
			let person2 = createPerson('Jane', 'Doe');
			console.log(person1.getFullName());
			console.log(person2.getFullName());


* The following show how to use the createPerson() factory function to create two objects person1 and person2.

* When you create an object, the JavaScript engine allocates memory to it. If you create many person objects, the JavaScript engine needs lots of memory spaces to store these objects.
  However, each person object has a copy of the same getFullName() method. Itâ€™s not efficient memory management.

* To avoid duplicating the same getFullName() function in every object, you can remove the getFullName() method from the person object.And move this method to another object:

			function createPerson(firstName, lastName) {
			    return {
			        firstName: firstName,
			        lastName: lastName
			    }
			}

			var personActions = {
  			getFullName() {
  			  return this.firstName + ' ' + this.lastName;
  			 },
			};
  And before calling the getFullName() method on the person object, you can assign the method of the personActions object to the person object as follows:
	let person1 = createPerson('John', 'Doe');
	let person2 = createPerson('Jane', 'Doe');

	person1.getFullName = personActions.getFullName;
	person2.getFullName = personActions.getFullName;

	console.log(person1.getFullName());
	console.log(person2.getFullName());
 This approach is not scalable if the object has many methods because you have to manually assign them individually. This is why the Object.create() method comes into play.



#### The Object.create() method
	
	+ The Object.create() method creates a new object using an existing object as the prototype of the new object:
		
			Object.create(proto, [propertiesObject])

	+ So you can use the Object.create() as follows:

			var personActions = {
			  getFullName() {
			    return this.firstName + ' ' + this.lastName;
			  },
			};

		function createPerson(firstName, lastName) {
		  let person = Object.create(personActions);
		  person.firstName = firstName;
		  person.lastName = lastName;
		  return person;
		}

	 let person1 = createPerson('John', 'Doe');
	let person2 = createPerson('Jane', 'Doe');

	console.log(person1.getFullName());
	console.log(person2.getFullName());

Note: The code works perfectly fine. However, in practice, you will rarely use the factory functions. Instead, you use classes or constructor/prototype patterns.

