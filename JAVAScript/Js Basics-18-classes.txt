~~~~ Classes prior to ES6 revisited ~~~~

 * Prior to ES6, JavaScript had no concepts of classes. To mimic a class, you often use the constructor/prototype pattern as shown in the following example:

		function Person(name) {
		    this.name = name;
		}

		Person.prototype.getName = function () {
		    return this.name;
		};

		var john = new Person("John Doe");
		console.log(john.getName());


  * ES6 class declaration

      + ES6 introduced a new syntax for declaring a class as shown in this example:

		class Person {
		    constructor(name) {
		        this.name = name;
		    }
		    getName() {
		        return this.name;
		    }
		}

      + In the Person class, the constructor() is where you can initialize the properties of an instance. JavaScript automatically calls the constructor() method when you instantiate an 	object of the class.

      + The following creates a new Person object, which will automatically call the constructor() of the Person class:
		
		let john = new Person("John Doe");

      + The getName() is called a method of the Person class. Like a constructor function, you can call the methods of a class using the following syntax

		objectName.methodName(args)
	example : 
		let name = john.getName();
		console.log(name); // "John Doe"

      + To verify the fact that classes are special functions, you can use the typeof operator of to check the type of the Person class.

		console.log(typeof Person); // function

      + The john object is also an instance of the Person and Object types:
	
		console.log(john instanceof Person); // true
		console.log(john instanceof Object); // true


~~~~~~~~ Getter & Setters~~~~~~~~

	+ ES6 provides specific syntax for defining the getter and setter using the get and set keywords. For example:

			class Person {
			    constructor(name) {
			        this._name = name;
			    }
			    get name1() {
			        return this._name;
			    }

			    set name1(newName) {
			        newName = newName.trim();
			        if (newName === '') {
			            throw 'The name cannot be empty';
			        }
			        this._name = newName;
			    }
			}
                        let person = new Person("JKLMN")
			person.name1 = 'Jane Smith';
			let name = person.name1;
			
			console.log(name)
       

	How it works...

	1. First, the name property is changed to _name to avoid the name collision with the getter and setter or we can change getter setter name like name1.

	2. 
	
