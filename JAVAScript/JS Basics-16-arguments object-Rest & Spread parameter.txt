# The arguments object

 + arguments is an array-like object accessible inside functions that contains the values of the arguments passed to that function.
		function func1(a, b, c) {
		  console.log(arguments[0]);
		  // Expected output: 1
	
		  console.log(arguments[1]);
		  // Expected output: 2

		  console.log(arguments[2]);
		  // Expected output: 3
		}

		func1(1, 2, 3);

  + The arguments object is a local variable available within all non-arrow functions.means it is not avialable in arrow function.



 #  JavaScript rest parameters

  + ES6 provides a new kind of parameter so-called rest parameter that has a prefix of three dots (...).

  +  A rest parameter allows you to represent an indefinite number of arguments as an array. See the following syntax:

		function fn(a,b,...args) {
		   //...
		}
   Example 1:

		function argsFn(...arg){
		    console.log(arg); // [ 1, 2, 3, 4 ]

		}
		argsFn(1,2,3,4)

   Example 2:

		function sum (a,b,...arg){
		    let total = 0;
		    for(item of arg){
		        total += item
		    }
		    console.log("Total "+(total+a+b))//18
		}
		sum(1,2,4,5,6);



  + Notice that the rest parameters must appear at the end of the argument list. The following code will result in an error:

		function fn(a,...rest, b) {
		 // error
		}
	SyntaxError: Rest parameter must be last formal parameter



  #   JavaScript spread operator

  + ES6 provides a new operator called spread operator that consists of three dots (...)

  + The spread operator allows you to spread out elements of an iterable object such as an array, map, or set. For example:

		const odd = [1,3,5];
		const combined = [2,4,6, ...odd];
		console.log(combined); // [ 2, 4, 6, 1, 3, 5 ]

     ``JavaScript spread operator and array manipulation``

      1) Constructing array literal 
		* The spread operator allows you to insert another array into the initialized array when you construct an array using the literal form. See the following example:
				let initialChars = ['A', 'B'];
				let chars = [...initialChars, 'C', 'D'];
				console.log(chars); // ["A", "B", "C", "D"]		

       2) Concatenating arrays	
		* Also, you can use the spread operator to concatenate two or more arrays:
				let numbers = [1, 2];
				let moreNumbers = [3, 4];
				let allNumbers = [...numbers, ...moreNumbers];
				console.log(allNumbers); // [1, 2, 3, 4]
	3) Copying an array
		* In addition, you can copy an array instance by using the spread operator:
				let scores = [80, 70, 90];
				let copiedScores = [...scores];
				console.log(copiedScores); // [80, 70, 90]
	

	`` JavaScript spread operator and strings``
		
		* In this example, we constructed the chars array from individual strings. When we applied the spread operator to the 'BC'string, it spreads out each individual character 		  of the string 'BC' into individual characters.
				let chars = ['A', ...'BC', 'D'];
				console.log(chars); // ["A", "B", "C", "D"]


  ###  Main differences b/w spread parameted and rest parameter 

	1. The spread operator (...) unpacks the elements of an iterable object.The rest parameter (...) packs the elements into an array.

	2)The rest parameters must be the last arguments of a function. However, the spread operator can be anywhere.
				const odd = [1,3,5];
				const combined = [2,...odd, 4,6];
				console.log(combined);